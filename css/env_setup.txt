
A CSS file has selectors and declarations
SELECTOR, SELECTOR, SELECTOR {
  DECLARATIONS;
}


#ID_SELECTOR {}                           /* starting with # is ID SELECTOR*/
.CLASS_SELECTOR {}                        /* starting with . is CLASS SELECTOR */


Three ways of including CSS:
1. INLINE CSS          <p style="text-align: center;color: black;"></p>
2. EXTERNAL CSS        <link href="path_to_css_file" rel="stylesheet" type="text/css" />
3. INTERNAL CSS        <style></style>


CSS3 is backward compatible and supported by major web browsers.


LAYOUTS
---------
TABLE LAYOUT used for designing layout for page using rowspan and colspan.
DIV LAYOUT also used for designing layout for page using float and position.
MULTI-COLUMN LAYOUT using width, column-width, -webkit-column-count, column-gap.


LAYOUT ENGINE
--------------
used internally by browsers, but sometimes we need to specify explicitly for some declarations
webkit          --> Safari, Chrome        eg: -webkit-column-count
trident         --> IE                    eg: -ms-column-count
gecko           --> FireFox               eg: -moz-column-count


MISC
------
eg: <div>
     <h2>My name is Donald</h2>
     <span>
      <p>I live in Duckburg.</p>
     </span>
   </div>
1. element1 element2   -->  select element2 INSIDE element1                     -->  here <p> is inside <span>, <h2>, <div>
2. element1 > element2  --> select element2 whose PARENT is element1            -->  here <p> parent is only <span>
3. element1 + element2  --> select element2 PLACED IMMEDIATELY AFTER element1 (not inside) -->  here <span> placed immediately after <h2>
4. element1 ~ element2  --> select element2 PRECEDED BY (not necessarily immediately preceded) element1 -->  here <span> preceded by <h2>


SELECTORS
-----------
/* REFERENCE : https://www.w3schools.com/cssref/css_selectors.asp */

tag1, tag2, tag3 {}                          /* tag selectors */
#ID1, #ID2 {}                                /* id selectors */
.CLASS1, .CLASS2 {}                          /* class selectors */
tag1#ID, tag2.CLASS {}                       /* tag with id ID and tag with class CLASS */
tag1[attribute]                              /* select elements with the specified attribute */
tag1[id=""] {}                               /* tag1 with attribute id and value equals */
tag1[id^=""] {}                              /* tag1 with attribute id and value starts with */
tag1[id$=""] {}                              /* tag1 with attribute id and value ends with */
tag1[id*=""] {}                              /* tag1 with attribute id and value contains */
#ID tag1 {}                                  /* tag1 that is INSIDE of tag with id ID */ /* eg: table tr {} */
tag1:nth-child(5) {}                         /* 5th tag1 of each parent , uses 1 based indexing */ /* eg: table tr:nth-child(even) {} */
tag1 > tag2:last-child {}                    /* last tag2 whose PARENT is tag1 */
tag1:not(.CLASS) {}                          /* all tag1 except with class CLASS */


DECLARATIONS
-------------
{
height: 100%;                                              /* In order for a percentage value to work, the parent's height/width must be determined. */ 
                                                           /* The only exception is the root element <html>, which can be a percentage */
                                                           /* The viewport-percentage lengths are relative to the size of the initial containing block. */
                                                           /* When the height or width of the initial containing block is changed, they are scaled accordingly. */
                                                           /* vw unit : Equal to 1% of the width of the initial containing block. eg: 100vw */
                                                           /* vh unit : Equal to 1% of the height of the initial containing block. eg: 100vh */
                                                           
width: 100%;                                               /* a block element (such as a <div>, <p>, or <ul>) will, by default expand to fit the width of its containing element (minus any margins it has or padding its parent has) */


background-image: url(img_tree.gif), url(mountain.jpg);    /* if first image not available use second but only one of these used */
background: url(img_tree.gif), url(mountain.jpg);          /* path to multiple images to be used as background */
background-size: 100% 100%;                                /* size of images (width, height)  */ /* background-size: contain, cover;  for using multiple image background */
background-color: pink;                                    /* bg color */
background-image: -webkit-gradient(linear, left bottom, right top, color-stop(0.25, cyan), color-stop(0.50, yellow));  /* gradient */


color: magenta;                                            /* font color */
text-shadow: 3px 8px 3px red;                              /* horizontl width, vertical width, blurred, color */
text-decoration: underline overline wavy red;              /* underline, overline, line-through | solid, wavy, dotted, dashed, double | color */
font-style: italic;
font-weight: bold;
font-family: "Times New Roman", Times, serif;              /* follows fallback mechanism , comma separated */


padding: 25px 50px 75px 100px;                             /* generate space around element's content, inside of any defined borders */
                                                           /* four values : top, right, bottom, left */
                                                           /* REFERENCE : https://www.w3schools.com/css/css_padding.asp */
                                                           
margin: 25px 50px 75px 100px;                              /* create space around elements, outside of any defined borders */
                                                           /* four values : top, right, bottom, left */
                                                           /* REFERENCE : https://www.w3schools.com/css/css_margin.asp */
                                                           
left: 50px;                                                /* it is used for positioning and used with position property else it has no effect */
                                                           /* position:absolute; left:20px; located 20px from the left of nearest relatively positioned parent (the top being the body tag) and is taken out of the document flow */
                                                           /* position:relative; left:20px; The element still maintains the same space as it would when static positioned */
                                                           /* Like it got up and got someone to save his space while it sat on his neighbors lap Or just mingle around the doc */

border-radius: 25px;                                       /* border radius */
box-shadow: 10px 10px 10px red;                            /* horizontl width, vertical width, blurred, color */


overflow: auto;                                            /* when content of element is too big to fit in the specified area. (visible | hidden | scroll | auto) */
overflow-x: scroll;                                        /* specifies what to do with the left/right edges of the content. */
overflow-y: scroll;                                        /* specifies what to do with the top/bottom edges of the content. */


position: sticky;                                          /* specifies type of positioning method used for element(static (default)| absolute | fixed | relative | sticky) */
                                                           /* relative (relative to parent element) , absolute (nearest positioned ( 'absolute', 'relative' or 'fixed') parent (the top being the body tag)) */
                                                           /* Static (default) positioned elements are not affected by top, bottom, left, right properties. */

position: absolute;                                        /* z-index only works on positioned elements */
z-index: -1;                                               /* z-index property specifies the stack order of an element. */
                                                           /* An element with greater stack order is always in front of an element with a lower stack order. */

                                       /* REFERENCE : https://www.w3schools.com/css/css_float.asp */
float: left;                           /* float property specifies how an element should float. ( left | right | none(default) ) */
clear: left;                           /* clear the float to left. Means that no floating elements allowed on left side (left | right | both) */

                                       /* REFERENCE : https://www.w3schools.com/cssref/pr_class_display.asp */
display: inline-block;                 /* specifies the display behavior (the type of rendering box) of an element. */
}


FONT RULES
-----------
.woff  (web open font format)
.ttf   (true type font)

@font-face{                                                /* Use customised font using Font Rule */
 font-family: myFont;
 src: url('path to font file downloaded ttf or woff file');
}
h1{
 font-family: myFont;                                     /* Apply font rule */
}


MEDIA RULES
------------
These allow to tailor CSS according to media type on which and how webpage viewed.

@media MEDIA-TYPE AND EXPRESSION { }


