
A CSS file has selectors and declarations
SELECTOR, SELECTOR, SELECTOR {
  DECLARATIONS;
}


#ID_SELECTOR {}                           /* starting with # is ID SELECTOR*/
.CLASS_SELECTOR {}                        /* starting with . is CLASS SELECTOR */


Three ways of including CSS:
1. INLINE CSS          <p style="text-align: center;color: black;"></p>
2. EXTERNAL CSS        <link href="path_to_css_file" rel="stylesheet" type="text/css" />
3. INTERNAL CSS        <style></style>


CSS3 is backward compatible and supported by major web browsers.


LAYOUTS
---------
TABLE LAYOUT used for designing layout for page using rowspan and colspan.
DIV LAYOUT also used for designing layout for page using float and position.
MULTI-COLUMN LAYOUT using width, column-width, -webkit-column-count, column-gap, column-rule


LAYOUT ENGINE
--------------
used internally by browsers, but sometimes we need to specify explicitly for some declarations
webkit          --> Safari, Chrome        eg: -webkit-column-count
trident         --> IE                    eg: -ms-column-count
gecko           --> FireFox               eg: -moz-column-count


MISC
------
eg: <div>
     <h2>My name is Donald</h2>
     <span>
      <p>I live in Duckburg.</p>
     </span>
   </div>
1. element1 element2   -->  select element2 INSIDE element1                     -->  here <p> is inside <span>, <h2>, <div>
2. element1 > element2  --> select element2 whose PARENT is element1            -->  here <p> parent is only <span>
3. element1 + element2  --> select element2 PLACED IMMEDIATELY AFTER element1 (not inside) -->  here <span> placed immediately after <h2>
4. element1 ~ element2  --> select element2 PRECEDED BY (not necessarily immediately preceded) element1 -->  here <span> preceded by <h2>


SELECTORS
-----------
/* REFERENCE : https://www.w3schools.com/cssref/css_selectors.asp */

tag1, tag2, tag3 {}                          /* tag selectors */
#ID1, #ID2 {}                                /* id selectors */
.CLASS1, .CLASS2 {}                          /* class selectors */
tag1#ID, tag2.CLASS {}                       /* tag with id ID and tag with class CLASS */
tag1[id] {}                                  /* select tag1 elements with the specified attribute (id here) */
[id] {}                                      /* select elements with id attribute */
tag1[id=""] {}                               /* tag1 with attribute id and value equals */
tag1[id^=""] {}                              /* tag1 with attribute id and value starts with */
tag1[class~=""] {}                           /* tag1 with attribute class and value contains as a whole word ie "flower" or "main flower" */
tag1[id|=""] {}                              /* tag1 with attribute id and value here can be single word or value succeded by '-' ie "flower" or "flower-ui" but not "flowerui" */
tag1[id$=""] {}                              /* tag1 with attribute id and value ends with */
tag1[id*=""] {}                              /* tag1 with attribute id and value contains as a substring */
tag1:not(.CLASS) {}                          /* all tag1 except with class CLASS *//* NOTE : donot use "" over selectors (.CLASS here) eg: a:not([target="_blank"])  or  :not([target="_blank"])  */
#ID tag1 {}                                  /* tag1 that is INSIDE of tag with id ID */ /* eg: table tr {} */

/* pseudo classes (:) , REFERENCE : https://www.w3schools.com/css/css_pseudo_classes.asp */
/* Pseudo-class names are not case-sensitive */
/* these can be used without any tag prefix ie applied globally to all tags */
a:link {}                                    /* unvisited link */      /* these must come in order for links to have effect */
a:visited {}                                 /* visited link */
a:hover {}                                   /* mouseover */
a:active {}                                  /* selected link */
p:empty {}                                   /* Selects every <p> element that has no children (including text nodes) */
div:hover + p {}                             /* p tag immediately followed by div tag when div tag is hovered  */
tag1:nth-child(5) {}                         /* 5th tag1 of each parent , uses 1 based indexing */ /* eg: table tr:nth-child(even) {} */
tag1 > tag2:last-child {}                    /* last tag2 whose PARENT is tag1 */
tag1:not(.CLASS) {}                          /* all tag1 except with class CLASS *//* NOTE : donot use "" over selectors (.CLASS here) */
q:lang(pb) { quotes: "~" "~"; }              /* q tag with attrib lang having val "pb"  , eg: <q lang="pb">A quote in a paragraph</q> */
input:checked {}                             /* for radio buttons and checkboxes of <input> , option:checked of <option> in <select> */
input:invalid {}                             /* input fields with values not according to their type attribute */
input[type="text"]:focus {}                  /* input tag with type attrib value as text and are focused */
.tab div:target {}                           /* target element div (eg: div with id ID1 when <a href="#ID1"> clicked) inside class tab */
input:out-of-range                           /* works for input elements with min and/or max attributes! */


/* pseudo elements (::) , REFERENCE : https://www.w3schools.com/css/css_pseudo_elements.asp */
/* Pseudo-element names are not case-sensitive */
/* these can be used without any tag prefix ie applied globally to all tags */
::placeholder {}                             /* placeholder CSS */
p::first-line {}                             /* first line of <p> visible on screen */
p::first-letter {}                           /* first letter of <p> */
p::selection {}                              /* portion of an element selected , properties that can be modified are color, background, cursor, outline. */
p::before {                                  /* Insert content at start of <p> , just like "prepend" in jQuery */
  content: "Read this -";
  background-color: yellow;
  color: red;
  font-weight: bold;
}
p::after {                                   /* Insert content at end of <p> , just like "append" in jQuery */
  content: " - Remember this";
  background-color: yellow;
  color: red;
  font-weight: bold;
}                                 /* content property can have values "TEXT", url(URL_IMAGE), " "attr(ATTRIBUTE_NAME)" " */
                                  /* REFERENCE : https://www.w3schools.com/cssref/pr_gen_content.asp */
                                  
                                  
/* SASS : Syntactically Awesome Style Sheets */
/* Instead of brackets and semicolons, it uses indentation of lines to specify blocks. Files in indented syntax use extension .sass */

/* SCSS : Sassy CSS */
/* every valid CSS3 stylesheet is valid SCSS as well. SCSS files use the extension .scss */
/* 1 : Basic Nesting, adds a space by default */
.parent {
  .child {}                    /* this compiles to    -->    .parent .child {}  */
}

/* 2 : "&" specifies an element that has both classes, no space added */
.some-class {
  &.another-class {}          /* this compiles to     -->    .some-class.another-class {}  */
}

/* 3 : "&" followed by space */
.parent {
  & .child {}                 /* this compiles to    -->    .parent .child {}  */
}

/* 4 : repositioning "&" */
.button {
  body.page-about & {}       /* this compiles to     -->     body.page-about .button {} */
}


DECLARATIONS
-------------
{
/* The height and width properties do not include padding, borders, or margins. */
/* Total element height = height + top padding + bottom padding + top border + bottom border + top margin + bottom margin */
/* Total element width = width + left padding + right padding + left border + right border + left margin + right margin */
height: 100%;                                              /* In order for a percentage value to work, the parent's height/width must be determined. */ 
                                                           /* The only exception is the root element <html>, which can be a percentage */
                                                           /* The viewport-percentage lengths are relative to the size of the initial containing block. */
                                                           /* When the height or width of the initial containing block is changed, they are scaled accordingly. */
                                                           /* vw unit : Equal to 1% of the width of the initial containing block. eg: 100vw */
                                                           /* vh unit : Equal to 1% of the height of the initial containing block. eg: 100vh */
                                                           
width: 100%;                                               /* a block element (such as a <div>, <p>, or <ul>) will, by default expand to fit the width of its containing element (minus any margins it has or padding its parent has) */

height:fit-content;
width:fit-content;

min-height: 50%;                                          /* If content is smaller than min-height, the min-height will be applied. */ /* If content is larger than min-height, the min-height property has no effect. */
max-height: 50%;                                          /* If content is larger than max-height, it will overflow. How the container will handle the overflowing content is defined by overflow CSS property. */ /* If content is smaller than max-height, the max-height property has no effect. */
min-width: 500px;                                         /* If content is smaller than min-width, the min-width will be applied. */ /* If content is larger than min-width, the min-width property has no effect. */
max-width: 150px;                                         /* If content is larger than max-width, it will automatically change the height of the element. */ /* If content is smaller than max-width, the max-width property has no effect. */


background-image: url(img_tree.gif), url(mountain.jpg);    /* if first image not available use second but only one of these used */
background: url(img_tree.gif), url(mountain.jpg);          /* path to multiple images to be used as background */
background-size: 100% 100%;                                /* size of images (width, height)  */ /* background-size: contain, cover;  for using multiple image background */
background-color: pink;                                    /* bg color */
background-image: -webkit-gradient(linear, left bottom, right top, color-stop(0.25, cyan), color-stop(0.50, yellow));  /* gradient */
background-image: linear-gradient(to right, rgba(255,0,0,0), rgba(255,0,0,1));                                        /* last param of rgba() define opacity */


color: magenta;                                            /* font color */
text-shadow: 3px 8px 3px red;                              /* horizontl width, vertical width, blurred, color */
text-decoration: underline overline wavy red;              /* underline, overline, line-through | solid, wavy, dotted, dashed, double | color */
font-style: italic;
font-weight: bold;
font-family: "Times New Roman", Times, serif;              /* follows fallback mechanism , comma separated */
text-transform: capitalize;                                /* none | capitalize | uppercase | lowercase | initial */
font-size: 25px;                                           /* medium | xx-small | x-small | small | large | x-large | xx-large | smaller | larger | length (px, cm) | initial */
text-align: center;
align-content: center;


padding: 25px 50px 75px 100px;                             /* generate space around element's content, inside of any defined borders */
                                                           /* four values : top, right, bottom, left */
                                                           /* REFERENCE : https://www.w3schools.com/css/css_padding.asp */
                                                           
margin: 25px 50px 75px 100px;                              /* create space around elements, outside of any defined borders */
                                                           /* four values : top, right, bottom, left */
                                                           /* REFERENCE : https://www.w3schools.com/css/css_margin.asp */
                                                           
left: 50px;                                                /* it is used for positioning and used with position property else it has no effect */
                                                           /* position:absolute; left:20px; located 20px from the left of nearest relatively positioned parent (the top being the body tag) and is taken out of the document flow */
                                                           /* position:relative; left:20px; The element still maintains the same space as it would when static positioned */
                                                           /* Like it got up and got someone to save his space while it sat on his neighbors lap Or just mingle around the doc */

border-radius: 25px;                                       /* border radius */
box-shadow: 10px 10px 10px red;                            /* horizontl width, vertical width, blurred, color */


overflow: auto;                                            /* when content of element is too big to fit in the specified area. (visible | hidden | scroll | auto) */
overflow-x: scroll;                                        /* specifies what to do with the left/right edges of the content. */
overflow-y: scroll;                                        /* specifies what to do with the top/bottom edges of the content. */


position: sticky;                                          /* specifies type of positioning method used for element(static (default)| absolute | fixed | relative | sticky) */
                                                           /* relative (relative to parent element) , absolute (nearest positioned ( 'absolute', 'relative' or 'fixed') parent (the top being the body tag)) */
                                                           /* Static (default) positioned elements are not affected by top, bottom, left, right properties. */

position: absolute;                                        /* z-index only works on positioned elements */
z-index: -1;                                               /* z-index property specifies the stack order of an element. */
                                                           /* An element with greater stack order is always in front of an element with a lower stack order. */

                                       /* REFERENCE : https://www.w3schools.com/css/css_float.asp */
float: left;                           /* float property specifies how an element should float. ( left | right | none(default) ) */
clear: left;                           /* clear the float to left. Means that no floating elements allowed on left side (left | right | both) */

                                       /* REFERENCE : https://www.w3schools.com/cssref/pr_class_display.asp */
display: inline-block;                 /* specifies the display behavior (the type of rendering box) of an element. */

/* CSS Grid Layout */
/* An HTML element becomes a grid container when its display property is set to grid or inline-grid. eg: <div class="grid-container"><div class="grid-item">1</div></div> */
.grid-container {
  display: grid;
  grid-template-columns: auto auto auto;     /* number of columns in your grid layout, and define the width of each column */
  grid-template-rows: auto auto;             /* height of each row */
  grid-column-gap: 50px;                     /* gap between columns */
  grid-row-gap: 50px;                        /* gap between rows */
  grid-column-start: 1;                      /* just like colspan in <table> or Merge cells in excel */
  grid-column-end: 3;
  grid-row-start: 1;                         /* similar to colspan but merge row wise */
  grid-row-end: 3;
}


visibility: hidden;
visibility: visible;

opacity: 0.4;
}


FONT RULES
-----------
.woff  (web open font format)
.ttf   (true type font)

@font-face{                                                /* Use customised font using Font Rule */
 font-family: myFont;
 src: url('path to font file downloaded ttf or woff file');
}
h1{
 font-family: myFont;                                     /* Apply font rule */
}


MEDIA RULES
------------
/* REFERENCE : https://www.w3schools.com/cssref/css3_pr_mediaquery.asp */

/* These allow to tailor CSS according to media type on which and how webpage viewed.
   Media queries can be used to check:
      width and height of the viewport
      width and height of the device
      orientation (is the tablet/phone in landscape or portrait mode)
*/
     
/* SYNTAX : @media [not|only] mediatype and (mediafeature) [and|or|not] (mediafeature) {   CSS-Code;  } */
          /* The only keyword prevents older browsers that do not support media queries with media features from applying the specified styles. */
          /* if you use not or only, you must also specify a media type */
          /* comma (,) is same as or */
          
/* mediatypes */
/* all	      :    Default. Used for all media type devices
   print      :    Used for printers
   screen     :    Used for computer screens, tablets, smart-phones etc.
   speech     :    Used for screenreaders that "reads" the page out loud
*/

/* mediafeatures */
/* height | width            :     The viewport height | width
   max-height | min-height   :     The maximum | minimum height of the display area, such as a browser window 
   max-width  | min-width    :     The maximum | minimum width of the display area, such as a browser window
   orientation               :     The orientation of the viewport (landscape or portrait mode)
                                   landscape : browser window is wider than its height , vice versa we have portrait
*/

/* 1 */
/* When the browser's width is between 600 and 900px (inclusive) OR above 1100px, change the appearance of DIV. */
@media screen and (max-width: 900px) and (min-width: 600px), (min-width: 1100px) {
  div.example {
    font-size: 50px;
    padding: 50px;
    border: 8px solid black;
    background: yellow;
  }
}



