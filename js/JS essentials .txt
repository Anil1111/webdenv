Array methods
        0.      var arr = ["Saab", " Volvo", "BMW"];
	0.      document.getElementById("#pid").innerHTML = arr;                              // returns comma separated values eg : Saab, Volvo,BMW
	0.      var arr4 = arr1.concat(arr2,arr3);                                            // just like "extend" in Python , new array returned with values of all.
	0.      arr.fill("Balle", 2, 4);                                                      // fill array with value at index [start,end) // modifies original array
	0.      arr.filter(func_that_returns_true_false);                                     // just like "filter" in Python
	0.      arr.forEach(funcName);                                                        // calls function once for each element in order. // does not return
	0.      arr.map(funcName);                                                            // calls function once for each element in order. // returns new array with results of calling function
	0.      Array.from("90254085RKTA");                                                   // just like "list()" in Python
	0.      arr.includes("chk",index_to_start_search);                                    // returns true/false if array contains the element.
	0.      arr.indexOf("chk", index_to_start_search);                                    // returns position, -1 if not found, -ve value index will search from that position from end till end
	0.      arr.lastIndexOf("chk", index_to_start_search);                                // returns position starting from end/index till beginning, -ve value index will search from that position from end till beginning
	0.      Array.isArray(arr);                                                           // returns true/false if object is array
	0.      arr.join("separator");                                                        // returns the array as a string with separator specified, else default (comma)
	0.      var newstr = arr.toString();                                                  //  returns a string with all the array values, separated by commas.
	0.      arr.length;                                                                   // returns number of elements in an array.
	0.      arr.pop();                                                                    // removes and return last element
	0.      arr.push("newelem");                                                          // adds new items to end of array, and returns new length.
	0.      arr.shift();                                                                  // removes and return first element
	0.      arr.unshift("val0", "val1");                                                  // adds new items to beginning of array, and returns new length.
	0.      arr.reduce(myFunc, initialVal);                                               // similar to "reduce" in Python // myfunc(accumVar, curVar) {return accumVar * curvar} , accumVar contains previous result or initialVal as applicable.
	0.      arr.reduceRight(myFunc, initialVal);                                          // similar to "reduce" but starts from right
	0.      arr.reverse();                                                                // modifies original array as reverse
	0.      var newarr = arr.slice(start,end);                                            // get all elem at index [start,end) as new array
	0.      arr.splice(start_adding_index, no_elem_to_remove, "Lemon", "Kiwi");           // adds/removes items to/from an array, and returns the removed item(s) if any.
	0.      var arr = arr.valueOf();                                                      // return the same array, the default method of the array object.
	0.      arr.sort();                                                                   // we can pass comparator function to it.
	0.	delete arr[index];                                                            // elem at index does not exist in arr (undefined) and donot change indexes of other elements.
	0.      arr.splice(index, 1);                                                         // start at index, remove 1 element, nothing new passed to add.
	

Boolean
        0.      Boolean(10 > 9) | (10 > 9) | 10 > 9                                           // returns true
	0.      var x = true;     x = x.toString();                                           // converts Boolean to String


Date 
	0.	var dt = new Date();                                                          // Date Object    Fri Oct 18 2019 15:08:10 GMT+0530 (India Standard Time)
	0.      var d = new Date("July 21, 1983 01:15:00");                                   // Date Object    Thu Jul 21 1983 01:15:00 GMT+0530 (India Standard Time)
	0.      dt.getDay();                                                                  // DAY_OF_WEEK  , (0 [Sunday] to 6)
	0.      dt.getMonth();                                                                // MONTH        , (0 [January] to 11)
	0.      dt.getDate();                                                                 // DAY_OF_MONTH , (1 to 31)
	0.      dt.getFullYear();                                                             // YEAR (four digits for dates between year 1000 and 9999)
	0.      dt.getHours();                                                                // HOURS        , (0 to 23)
	0.      dt.getMinutes();                                                              // MINUTES      , (0 to 59)
	0.      dt.getSeconds();                                                              // SECONDS      , (0 to 59)
	0.      dt.getMilliseconds();                                                         // MILLISECONDS , (0 to 999)
	0.      dt.toDateString();                                                            // date (not the time) of Date object into readable string. eg: Fri Oct 18 2019
	0.      dt.toTimeString();                                                            // time portion of a Date object to a string. eg: 16:06:10 GMT+0530 (India Standard Time)
	0.      dt.toLocaleTimeString();                                                      // time portion of a Date object as a string, using locale conventions. eg: 4:01:43 PM
	0.      dt.getTime();                                                                 // milliseconds between midnight of January 1, 1970 and the specified date object.
	0.      var n = Date.now();                                                           // milliseconds between midnight of January 1, 1970 and the specified date object.
	0.      dt.getUTCDay();                                                               // UTC DAY_OF_WEEK  (0 [Sunday] to 6)
	0.      dt.getUTCMonth();                                                             // UTC MONTH        (0 [January] to 11)
	0.      dt.getUTCDate();                                                              // UTC DAY_OF_MONTH (1 to 31)
	0.      dt.getUTCFullYear();                                                          // UTC YEAR
	0.      dt.getUTCHours();                                                             // UTC HOURS
	0.      dt.getUTCMinutes();                                                           // UTC MINUTES
	0.      dt.getUTCSeconds();                                                           // UTC SECONDS
	0.      dt.getUTCMilliseconds();                                                      // UTC MILLISECONDS
	0.      dt.toUTCString();                                                             // date object to a string, according to universal time. eg: Fri, 18 Oct 2019 10:38:48 GMT
	

Exception Handling
        0.      try {
	          adddlert("Welcome guest!");                                                 // this will generate builtin error object
		 
		  if(x == "")  throw "empty";                                                 // throw error explicitly
		  if(isNaN(x)) throw "not a number";
		  x = Number(x);
		  if(x < 5)  throw "too low";
		  if(x > 10)   throw "too high";
		}
		catch(errobj) {
		  if(errobj.message == undefined) {                                          // check if errorobj is builtin or explicit
		   document.getElementById("demo").innerHTML = errobj;
		  }
		  else {
		   document.getElementById("demo").innerHTML = errobj.name + " " + errobj.message;       // name/message of builtin obj
		  }
		}
		finally {
		 
		}
		
		
Misc.
        0.      // In JavaScript, "this" is the object that "owns" the code.
	        // The value of "this" , when used in an object, is the object itself.
        0.      var res = encodeURI("https://w3schools.com/my test.asp?name=ståle&car=saab");            // encodes special characters, except: , / ? : @ & = + $ #
	0.      var dec = decodeURI(enc);
	0.      var res = encodeURIComponent("https://w3schools.com/my test.asp?name=ståle&car=saab");   // encodes special characters. In addition, it encodes the following characters: , / ? : @ & = + $ #
	0.      var uri_dec = decodeURIComponent(uri_enc);
	0.      var b = eval("2 + 2");                                                                   // evaluates expression or executes JS statements.
	0.      Infinity when a number exceeds the upper limit of the floating point numbers, which is 1.797693134862315E+308.
	       -Infinity when a number exceeds the lower limit of the floating point numbers, which is -1.797693134862316E+308.
	0.      isNaN("9025");                                                                          // converts arg to a Number, then tests it.  "9025" and 9025 both give false as ther are Number   // this is different from Number.isNaN();
	0.      Number(true)                                                                            // converts arg to number. If value cannot be converted to legal number, NaN is returned.
	0.      var c = parseFloat("10.33");                                                            // 10.33
	0.      var c = parseInt("10.33");                                                              // 10
	        var h = parseInt("10", 8);                                                              // 8 (octal , second arg 8 passed)
		var j = parseInt("20", 16);                                                             // 32 (hexadecimal , second arg 16 passed)
	0.      String(x)  ==  x.toString();                                                            // typecast to string
	0.      if (typeof y === "undefined") {                                                         // typeof  |  undefined  // returns type of variable, object, function or expression
	          txt = "y is undefined";
		}
	0.      <a href="javascript:void(0);">Useless link</a>               // The void operator evaluates an expression and returns undefined.
	                                                                     // This operator is often used to obtain the undefined primitive value, using "void(0)".
	        <a href="javascript:void(document.body.style.backgroundColor='red');">Click to change background color of body to red</a>
		                                                             // (this is useful when evaluating an expression without using the return value).

Debugging
        0.     // activate debugging in your browser with the F12 key, and select "Console" in the debugger menu.
	0.     // use console.log() to display JavaScript values in the debugger window
	0.     // The "debugger" keyword stops the execution of JavaScript, and calls (if available) the debugging function.
	          // This has the same function as setting a breakpoint in the debugger.
	0.     var x = 15 * 5;    debugger;     document.getElementById("demo").innerHTML = x;


Number
	0.	Number.MAX_VALUE;
	0.      Number.MIN_VALUE;
	0.      Number.NEGATIVE_INFINITY;
	0.      Number.POSITIVE_INFINITY;
	0.      var n = num.toExponential(3);      // number into an exponential notation 23.4568  -->  2.346e+1 coz after decimal 3 reqd
	0.      var n = num.toFixed(2);            // Convert number into string, keeping specified decimals or 0 if reqd after decimal
	0.      var n = num.toPrecision(5);        // Format a number to a specified length   13.67890  -->  13.679
	0.	Number.isNaN(NaN)                  // true (here) only on "NaN" arg else false ('NaN' as string is also false)
	                                           // This is different from global isNaN() function converts the tested value to a Number, then tests it.
						   
Regex
        0.      // Syntax   :   /pattern/modifiers               eg:  var patt = /w3schools/i;
	0.      // MODIFIERS
	           g    Perform a global match (find all matches rather than stopping after the first match)
	           i    Perform case-insensitive matching
		   m	Perform multiline matching               eg:  var str = "\nIs th\nis it?";   var patt1 = /^is/m;
	0.      // The exec() method tests for a match in a string, returns matched text if finds match, otherwise returns null.
	           var patt2 = /W3Schools/g;     var result2 = patt2.exec(str);
	0.      // test() method tests for a match in a string, returns true if it finds a match, otherwise it returns false.
	           var patt = /Hello/g;          var result = patt.test(str);
	0.      var res = str.match(/ain/g);                      // returns the matches, as an Array object  or  null
	0.      var res = str.replace(/blue/g, "red");            // values are replaced
	0.      var n = str.search(/blue/i);                      // returns the position of the m
	
	
Strings
        0.      var res = str.length                       // length of string
	0.      var res = str.charAt(index)                // character at the specified index (position)
	0.      var res = str1.concat(str2, str3);         // concatenate multiple strings
	0.      str.endsWith();                            // Checks whether string ends with specified string/characters
	0.      str.startsWith();                          // Checks whether string starts with specified string/characters
	0.      str.includes("chk", start);                // Checks whether string contains the specified string/characters
	0.      var res = str.indexOf("chk", start);       // Returns position of first found occurrence of specified value in string
	0.      var res = str.repeat(2);                   // conacatenate str specified number of times to itself
	0.      var res = str.slice(start, end);           // get array elems [start,end) index
	0.      var res = str.substring(start, end);       // get array elems [start,end) index
	0.      var res = str.substr(start, chars_reqd);   // get array elems [start,start + chars_reqd) index
	0.      var res = str.split(" ", limit);           // Splits a string into an array of substrings , with limit specified , not included in res after limit
	0.      var res = str.toLowerCase();
	0.      var res = str.toUpperCase();
	0.      var res = str.trim();


Form
	0.	document . name-of-form . name-of-widget . value        // set or get value.
	0.	onsubmit=“return(validate())”.                          // return false from func if error else true.


Functions
	0.	var f = function(a, b) { return a*b; }              // anonymous function stored in variable f | args passed without var keyword before them
                    f (45, 5);                                      // invoke function stored in variable f
	0.      var f = function(a=1, b=0) { return a*b; }          // default values passed to function incase not passed on invoke
	0.      (function () {
	            var x = "Hello!!";                              // anonymous self-invoking function , NOTE : () around and after function
		})();
	0.      const x = (x, y) => { return x * y };               // Arrow Functions in ES6
	0.      function findMax() {                                // findMax(4, 5, 6) is called without using args in definition  // uses built-in "arguments" object.
	            var i;
		    var max = -Infinity;
		    for(i = 0; i < arguments.length; i++) {
		        if (arguments[i] > max) {
			    max = arguments[i];
			    }
			 }
		     return max;
		 }
	0.      var add = (function () {                          // JS Closures , a function having access to parent scope, even after parent function has closed.
	             var counter = 0;
		     return function () {counter += 1; return counter}   
		})();                                             // self-invoking function only runs once. It sets counter to zero (0)
		                                                  // and returns a function expression to variable add whuich can be invoked
                add();
	0.      var obj = {"first" : "kapoor" ,                     // function() as a value to key in object  /* call function as obj.full("-") , NOTE : use of () in obj.full() (not obj.full) */
                          "second" : "rakshit" ,
                          "full" : function(sep){
                            return this.first + sep + this.second;
                          }};                                       
	0.      var obj = {firstName: "John",                       // getter inside object using "get" keyword   /* call getter as obj.lang , NOTE : no use of () in getter */
                           lastName : "Doe",
                           language : "en",
                           get lang() {
                              return this.language.toUpperCase();
                            }};                                    
        0.      var obj = {firstName: "John",                       // setter inside object using "set" keyword  /* call setter as obj.lang = "en"; */
                           lastName : "Doe",
                           language : "",
                           set lang(lang) {
                              this.language = lang.toUpperCase();
                            }};                                     
	0.      function Person(first, last, age, eye) {            // Constructor , a convention to distinguish ordinary function and constructor write FunctionName as Capitalized
	          this.firstName = first;
		  this.lastName = last;
		  this.age = age;
		  this.eyeColor = eye;
		  this.nationality = "Amritsari";                   // default property to all objects of this constructor
		  this.changeFirstName = function(arg){
		      this.firstName = arg;                         // function to return/change inside constructor
		      };
		 }                                /* object created as , var myFatherObj = new Person("Anil", "Kapoor", 50, "black"); */
		                                  /* object used as    , myFatherObj.nationality, myFatherObj.age, .... */
	0.     Person.prototype.gender = "Male";                    // All JS objects inherit properties and methods from a prototype.
	                                                            // We can add new properties using prototype.

	
Math
	0.	Math.abs();                                         // absolute value
	0.	Math.ceil();                                        // ceil
	0.	Math.floor();                                       // floor
	0.      Math.round();                                       // round to nearest integer
	0.      Math.E;                                             // Euler's Number (approximately 2.718)
	0.      Math.exp(1);                                        // Return E^x     (Euler's number raised to x (here 1) )
	0.	Math.pow(a,b);                                      // a^b
	0.	Math.sqrt()                                         // square root
	0.      Math.cbrt();                                        // cube root
	0.	Math.random();                                      // generate number [0,1)  // No arg passed
	0.	Math.trunc(879.76);                                 // integer part only , removes decimal
	0.	Math.PI;                                            // PI = 22/7 = 3.14
	0.      Math.max(val1, val2, val3, ...);                    // Maximum of given arguments
	0.      Math.min(val1, val2, val3, ...);                    // Minimum of given args
	0.	Math.log(arg);                                      // natural logarithm of arg
	0.      Math.LN10;                                          // natural logarithm of 10
	0.      Math.log(arg)/Math.LN10;                            // log(arg)/log(10)
	

Alerts
        0.      var resp = prompt("Enter your name","naam");     // returns value entered, first arg is message, second arg is placeholder
	0.	alert(resp);                                     // a message alert
	0.	var cnfstat = confirm("Do you want to exit ?");  // confirmation alert
		if(cnfstat) alert("you said yes !");
		else alert("you said no !");
		
		
CSS
        0.      onclick = this.style.opacity="0.4";
	0.      onclick = this.style.left="+=250px";             // += , -=  specifies CSS properties from current values


Events
        0.      onclick, onfocus, onblur, onchange, onmouseover, onmouseout, onmousemove
	0.	oncontextmenu                   // right click event handler 
	0.	onClick = “func(this)”          // "this" provides a context object to element itself
	0.	onkeydown, onkeypress, onkeyup  // "event" provides a context object to event which triggered the function
                function keydown(e){                                           // first
			if(e.keyCode) console.log("keydown : " + e.keyCode)
		}

		function keypress(e){
			if(e.charCode) console.log("keypress charcode : " + e.charCode);  
			                                                      // second  
			                                                      // keypress works only for alphanumeric and not special keys
		}

		function keyup(e){                                            // third
			if(e.keyCode) console.log("keyup : " + e.keyCode)
		}

                <input type="text" name="dummy" onkeydown="keydown(event)" onkeypress="keypress(event)" onkeyup="keyup(event)">
		
        0.      stopPropagation()
	        <div onclick="func2()">DIV 2
	             <div onclick="func1(event)">DIV 1</div>            // Because DIV 1 is inside Div 2, both DIVs get clicked when you click on DIV 1.
	        </div>                                                  // stopPropagation() method prevents propagation of the same event from being called.
                                                                        // Propagation means bubbling up to parent elements or capturing down to child elements.
	       function func1(obj) { alert("DIV 1"); obj.stopPropagation(); }
	       
        0.     preventDefault()
	       $("a").click(function(event){
	          event.preventDefault();  });                           // preventDefault() method stops the default action of an element from happening.
		  
        0.     addEventListener()                                        // addEventListener() method attaches an event handler to the specified element.
	       document.getElementById("myBtn").addEventListener("mouseover", myFunction);
	       document.getElementById("myBtn").addEventListener("click", someOtherFunction);   // same/different event attached with same/different function
	       document.getElementById("myBtn").addEventListener("mouseout", OtherFunction);
	       document.getElementById("myBtn").addEventListener("click", function() { myFunction(p1, p2); });
	       document.getElementById("myDIV").removeEventListener("mousemove", myFunction);   // name of the event to remove,function to remove.
	       document.addEventListener("click", myFunction);          // attaches an event handler to the document , here myFunction gets called , anywhere user clicks on document.

        0.     setTimeout(func, duration)                                // calls 'func' only once after 'duration' millisec

        0.     var intervalVar = setInterval(func, duration)             // calls 'func' after every 'duration' millisec
        0.     clearInterval(intervalVar)                                // pass in name of variable defined during setInterval

￼
